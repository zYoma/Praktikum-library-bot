from flask import Flask  # –∏—Å–ø–æ–ª—å–∑—É–µ–º Flask
from flask import request  # —É —Ñ–ª–∞—Å–∫–∞ –µ—Å—Ç—å —Å–≤–æ–π request
from flask_sslify import SSLify  # –¥–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SSL
from flask import jsonify
import requests
import json
import re
from dotenv import load_dotenv
import os
from parsing import get_content
import time

load_dotenv()
# –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
URL = 'https://api.telegram.org/bot' + TELEGRAM_TOKEN + '/'
search_dict = {}
create_dict = {}
re_start_word = r"(^|\s)%s"

# –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –æ—Ç–≤–µ—Ç –≤ json —Ñ–∞–π–ª –≤
# —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—Ä–∏—Ä–∏–ª–∏—Ü—ã


def write_json(data, filename='answer.json'):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞


def send_Message(chat_id, text):
    url = URL + 'sendMessage'
    kb_markup = {'resize_keyboard': True, 'keyboard': [[{'text': '–†–∞–∑–¥–µ–ª—ã'}, {
        'text': '–ü–æ–∏—Å–∫'}], [{'text': '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'}, {'text': '–í—Å–µ –∑–∞–ø–∏—Å–∏'}]]}
    answer = {'chat_id': chat_id, 'text': text,
              'reply_markup': kb_markup, 'parse_mode': 'HTML'}
    r = requests.post(url, json=answer)
    return r.json()

# –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ inline —Ä–µ–∂–∏–º


def send_inline_results(id, result):
    url = URL + 'answerInlineQuery'
    results = []
    for post in result:
        input_message_content = {
            'message_text': post['url'], 'parse_mode': 'Markdown'}
        data = {
            'type': 'article',
            'title': post['title'],
            'id': post['id'],
            'input_message_content': input_message_content
        }
        results.append(data)

    answer = {
        'inline_query_id': id,
        'results': json.dumps(results),
    }
    r = requests.post(url, json=answer)
    return r.json()

# –¥–µ—Ä–≥–∞–µ–º api


def get_posts():
    api = 'http://3.126.19.96:5000/api/v1/posts/'
    r = requests.get(api)
    result = []
    for post in r.json():
        title = post.get('title')
        description = post.get('description')
        url = post.get('url')
        id = post.get('id')
        data = {
            'title': title,
            'description': description,
            'url': url,
            'id': id
        }
        result.append(data)

    return result


def create_post(create_dict):
    api = 'http://3.126.19.96:5000/api/v1/posts/'
    data = {
        'title': create_dict['title'],
        'description': create_dict['description'],
        'url': create_dict['url'],
        'language': 'RU'
    }
    r = requests.post(api, data=data)


def search(query):
    text = re.escape(query.lower())
    posts = get_posts()
    result = [post for post in posts if re.search(
        re_start_word % text, str(post['title'].lower()))]
    return result

# —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–ª–∞—Å–∫–∞
app = Flask(__name__)
sslify = SSLify(app)

# –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É, –≤—ã–ø–æ–ª–Ω—è–µ–º
# —Ñ—É–Ω–∫—Ü–∏—é main


@app.route('/' + TELEGRAM_TOKEN + '/', methods=['POST', 'GET'])
def main():
    if request.method == 'POST':
        r = request.get_json()  # —á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–∞–º –ø—Ä–∏–ª–µ—Ç–µ–ª–æ
        write_json(r)  # –ø–∏—à–µ–º –≤ —Ñ–∞–π–ª–∏–∫
        # –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∑–≤–∞–Ω –≤ inline—Ä–µ–∂–∏–º–µ
        if 'inline_query' in r:
            id = r['inline_query']['id']
            query = r['inline_query']['query']
            result = search(query)
            if result:
                send_inline_results(id, result)
            return jsonify(r)

        try:
            # –ø–æ–ª—É—á–∞–µ–º  id —é–∑–µ—Ä–∞, –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –µ—Å–ª–∏ –±–æ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏
            # –≥—Ä—É–ø–ø–µ
            chat_id = r['message']['chat']['id']
        except:
            chat_id = None
        if chat_id:
            message = r['message']['text']
            username = r['message']['chat'][
                'username']  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
            if chat_id in search_dict:
                result = search(message)
                if result:
                    for post in result:
                        send_Message(chat_id, text=post['url'])

                else:
                    send_Message(chat_id, text='–Ø –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏!')
                search_dict.pop(chat_id)
                return jsonify(r)

            # –æ—Ç–º–µ–Ω–∞
            if re.search(r'/exit', message):
                create_dict.pop(chat_id)
                send_Message(chat_id, text='–æ–∫!')
                return jsonify(r)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
            if chat_id in create_dict:
                # if create_dict[chat_id]['title'] == None:
                #     create_dict[chat_id]['title'] = message
                #     send_Message(
                # chat_id, text='<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã
                # -/exit</i>')
                if create_dict[chat_id]['description'] == None:
                    create_dict[chat_id]['description'] = message
                    send_Message(
                        chat_id, text='<b>–ö–∏–¥–∞–π –º–Ω–µ —Å—Å—ã–ª–∫—É, –¥–∞–ª—å—à–µ —è —Ä–∞–∑–±–µ—Ä—É—Å—å.</b>\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã - /exit</i>')
                elif create_dict[chat_id]['url'] == None:
                    try:
                        message_type = r['message']['entities'][0]['type']
                    except KeyError:
                        send_Message(
                            chat_id, text='<b>–Ø –∂–¥—É –æ—Ç –≤–∞—Å –∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫—É, –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ —Å–º–∞–π–ª—ã.</b>\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã -/exit</i>')
                    else:
                        title = get_content(message)
                        create_dict[chat_id]['title'] = title
                        create_dict[chat_id]['url'] = message
                        create_post(create_dict[chat_id])
                        send_Message(chat_id, text='–Ø —ç—Ç–æ –∑–∞–ø–æ–º–Ω—é!')
                        create_dict.pop(chat_id)
                return jsonify(r)

            if re.search(r'–†–∞–∑–¥–µ–ª—ã', message):
                text = '–°–∫–æ—Ä–æ —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–∞–∑–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ üòú'
            elif re.search(r'–ü–æ–∏—Å–∫', message):
                text = '–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?'
                search_dict[chat_id] = username

            elif re.search(r'https://stackoverflow.com/questions/35956045/extract-title-with-beautifulsoup/35956388', message):
                get_content(message)
                text = '–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?'

            elif re.search(r'–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', message):
                text = '<b>–û —á–µ–º —Å—Ç–∞—Ç—å—è? –ß–µ–º –æ–Ω–∞ –ø–æ–ª–µ–∑–Ω–∞?</b>\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã - /exit</i>'
                create_dict[chat_id] = {
                    'title': None,
                    'description': None,
                    'url': None,
                }

            elif re.search(r'–í—Å–µ –∑–∞–ø–∏—Å–∏', message):
                posts = get_posts()
                for post in posts:
                    text = '{}'.format(post['url'])
                    send_Message(chat_id, text=text)
                    time.sleep(1)
                return jsonify(r)
            else:
                text = '–ü—Ä–∏–≤–µ—Ç <b>{}</b>, —è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å API'.format(
                    username)

            send_Message(chat_id, text=text)  # –æ—Ç–≤–µ—á–∞–µ–º

        return jsonify(r)

# –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—à–µ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, —Ç–æ —Å—Ç–∞—Ä—Ç—É–µ–º
# —Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º ip –∏ –ø–æ—Ä—Ç—É. —É–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å
# —Ç–µ–ª–µ–≥—Ä–∞–º–º
if __name__ == '__main__':
    app.run(host='172.26.1.126', port=88, debug=True,
            ssl_context=('webhook_cert.pem', 'webhook_pkey.pem'))
